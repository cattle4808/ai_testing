import json
from aiogram import Router, F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.conf import settings

from services.models import operations
from ... import redis, bot

admin_callback = Router()


@admin_callback.callback_query(F.data.regexp(r"allow_payment_from_admin:(.+)$"))
async def allow_payment_from_admin_handler(callback: types.CallbackQuery, state: FSMContext):
    redis_key = callback.data.split("allow_payment_from_admin:")[1]
    raw_data = json.loads(await redis.get(f"buy_script:{redis_key}"))

    key = raw_data.get("key")
    change_script = await sync_to_async(operations.change_script_status)(key, True)

    referrals_bonus_count = raw_data.get("referrals_count")

    if referrals_bonus_count:
        for _ in referrals_bonus_count:
            await sync_to_async(operations.change_status_referral_by_id)(
                referral_id=_.get("id"),
                status=True
            )

    user_message_text = (
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n"
        f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
        f"–†–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏:\n\n"
        f"üÜî: <code>{raw_data.get('key')}</code>\n\n"
        f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {change_script.get('start_at')}\n"
        f"‚è±Ô∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: {change_script.get('stop_at')}\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ:\n"
        f"<code>javascript:import('{settings.GET_SCRIPT_JS}/{change_script.get('script')}')</code>\n\n"
        f"üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ ‚Äî —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    await bot.send_photo(
        chat_id=raw_data.get("user_id"),
        photo=raw_data.get("file_id"),
        caption=user_message_text,
        parse_mode="HTML"
    )

    testing_script_name = f"testing_{raw_data.get('script')}"
    testing_script = await sync_to_async(operations.create_testing_script)(testing_script_name)
    testing_block = (
        f"üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</b>\n"
        f"üÜî: <code>{testing_script.get('key')}</code>\n"
        f"‚è±Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <code>{testing_script.get('start_at')}</code> ‚Äî <code>{testing_script.get('stop_at')}</code>\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <code>javascript:import('{settings.GET_SCRIPT_JS}/{testing_script.get('script')}')</code>\n\n"
        f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."
    )

    await bot.send_message(
        chat_id=raw_data.get("user_id"),
        text=testing_block,
        parse_mode="HTML"
    )


    chat = await bot.get_chat(raw_data.get('user_id'))
    user_name = chat.username or '—Å–∫—Ä—ã—Ç'

    caption = (
        f"User_id: {raw_data.get('user_id')}\n"
        f"user_name: {user_name}\n"
        f"üÜî: <code>{raw_data.get('key')}</code>\n\n"
        f"üíµ –°—É–º–º–∞: <b>{raw_data.get('payment_sum')}</b>\n"
        f"‚è±Ô∏è –°:  <code>{raw_data.get('start_at')}</code>\n"
        f"‚è±Ô∏è –î–æ: <code>{raw_data.get('stop_at')}</code>\n\n"
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>"
    )

    for admin, msg_id in raw_data.get("admins").items():
        try:
            await bot.edit_message_caption(
                chat_id=int(admin),
                message_id=msg_id,
                caption=caption,
                reply_markup=None,
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise


    if raw_data.get("referred_by"):
        await sync_to_async(operations.add_to_referral)(
            inviter_user_id=raw_data.get("referred_by"),
            invited_user_id=raw_data.get("user_id")
        )

    try:
        await bot.delete_message(
            chat_id=raw_data.get("user_id"),
            message_id=raw_data.get("payment_msg_id")
        )
    except:
        pass

    try:
        await bot.delete_message(
            chat_id=raw_data.get("user_id"),
            message_id=raw_data.get("send_payment_msg_id")
        )
    except:
        pass
    await state.clear()
    await redis.delete(f"buy_script:{redis_key}")


@admin_callback.callback_query(F.data.regexp(r"deny_payment_from_admin:(.+)$"))
async def deny_payment_from_admin_handler(callback: types.CallbackQuery, state: FSMContext):
    redis_key = callback.data.split("deny_payment_from_admin:")[1]
    raw_data = json.loads(await redis.get(f"buy_script:{redis_key}"))
    key = raw_data.get("key")

    referrals_bonus_count = raw_data.get("referrals_count")
    if referrals_bonus_count:
        for _ in referrals_bonus_count:
            await sync_to_async(operations.change_status_referral_by_id)(
                referral_id=_.get("id"),
                status=False
            )

    user_message_text = (
        f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º –≤—Ä—É—á–Ω—É—é.\n\n"
        f"üÜî: <code>{raw_data.get('key')}</code>\n\n"
        f"üíµ –°—É–º–º–∞: <b>{raw_data.get('payment_sum')}</b>\n"
        f"‚è±Ô∏è –°: <code>{raw_data.get('start_at')}</code>\n"
        f"‚è±Ô∏è –î–æ: <code>{raw_data.get('stop_at')}</code>\n\n"
    )

    await bot.send_photo(
        chat_id=raw_data.get("user_id"),
        photo=raw_data.get("file_id"),
        caption=user_message_text,
        parse_mode="HTML"
    )

    chat = await bot.get_chat(raw_data.get('user_id'))
    user_name = chat.username or '—Å–∫—Ä—ã—Ç'
    caption_2 = (
        f"User_id: {raw_data.get('user_id')}\n"
        f"user_name: {user_name}\n"
        f"üÜî: <code>{raw_data.get('key')}</code>\n\n"
        f"üíµ –°—É–º–º–∞: <b>{raw_data.get('payment_sum')}</b>\n"
        f"‚è±Ô∏è –°:  <code>{raw_data.get('start_at')}</code>\n"
        f"‚è±Ô∏è –î–æ: <code>{raw_data.get('stop_at')}</code>\n\n"
        f"‚ùå <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ </b>"
    )

    for admin, msg_id in raw_data.get("admins").items():
        try:
            await bot.edit_message_caption(
                chat_id=int(admin),
                message_id=msg_id,
                caption=caption_2,
                parse_mode="HTML",
                reply_markup=None
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

    try:
        await bot.delete_message(
            chat_id=raw_data.get("user_id"),
            message_id=raw_data.get("payment_msg_id")
        )
    except:
        pass

    try:
        await bot.delete_message(
            chat_id=raw_data.get("user_id"),
            message_id=raw_data.get("send_payment_msg_id")
        )
    except:
        pass

    await state.clear()
    await redis.delete(f"buy_script:{redis_key}")
