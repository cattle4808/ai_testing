import json
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.conf import settings

from .. user import user_inline, admin_inline
from ... import redis, bot
from ... fsm.user import UserPaymentCheck

from services.models import operations


user_callback = Router()

@user_callback.callback_query(F.data == "faq")
async def show_faq(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await callback.answer("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", show_alert=True)
        return

    await callback.answer()

    text = (
        "<b>üìö –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"

        "1. üë• <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞?</b>\n"
        "–í—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ –ª—é–¥–µ–π. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö —Å–æ–≤–µ—Ä—à–∏—Ç –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 25 000 —Å—É–º. "
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ ‚Äî 125 000 —Å—É–º –Ω–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É.\n\n"

        "2. üïí <b>–ö–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç?</b>\n"
        "–°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–æ–≤–Ω–æ 2 —á–∞—Å–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ 14:30 ‚Äî —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å 14:30 –¥–æ 16:30.\n\n"

        "3. üí∞ <b>–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?</b>\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—É–º–º—É. –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —á–µ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞.\n\n"

        "4. üö´ <b>–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?</b>\n"
        "–ù–µ—Ç. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω. –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë.\n\n"

        "5. üîê <b>–ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ?</b>\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp. –î–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã, –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.\n\n"

        "6. üì© <b>–ö –∫–æ–º—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏?</b>\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º: @AFT_Admin1"
    )

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=user_inline.back_support()
    )


@user_callback.callback_query(F.data == "back_to_support")
async def support(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "<b>üõ† –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é. "
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n\n"
        "üîê <b>–í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b> ‚Äî –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.\n"
        "üéØ <b>–í–∞—à–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</b> ‚Äî –Ω–∞—à–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.\n\n",
        parse_mode="HTML",
        reply_markup=user_inline.support()
    )


@user_callback.callback_query(F.data.regexp(r"^buy_script:(.+)$"))
async def buy(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception as e:
        print(e)

    redis_key = callback.data.split("buy_script:")[1]
    raw_data = await redis.get(f"buy_script:{redis_key}")

    if not raw_data:
        return

    data = json.loads(raw_data)

    referrals = await sync_to_async(operations.get_referrals_counts)(callback.from_user.id)
    referrals_list = referrals.get('unused', [])[:5]
    referrals_count = len(referrals_list)

    base_price = settings.SCRIPT_BASE_PRICE
    discount = referrals_count * settings.REWERD_PER_REFFERAL
    payment_sum = max(base_price - discount, 0)

    referral_note = (
        f"<s>{base_price} —Å—É–º</s> ‚Üí <b>{payment_sum} —Å—É–º</b>\n"
        if referrals_count > 0 else
        f"<b>{payment_sum} —Å—É–º</b>\n"
    )

    await state.set_state(UserPaymentCheck.waiting_for_img)
    await state.update_data(redis_key=redis_key)

    msg = await callback.message.answer(
        f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {referral_note}\n"
        f"üÜî <code>{data.get('key')}</code>\n"
        f"‚è± <code>{data.get('start_at')}</code>\n"
        f"‚è≥ <code>{data.get('stop_at')}</code>\n\n"
        "üí∞ <b>–ö–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n<code>9860 3501 4146 8917</code>\n"
        "–í–ª–∞–¥–µ–ª–µ—Ü: <b>DANIIL TERGALINSKIY</b>\n\n"
        "<b>üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.</b>",
        parse_mode="HTML",
        reply_markup=user_inline.cancel_keyboard(redis_key)
    )

    data["payment_msg_id"] = msg.message_id
    data["payment_sum"] = payment_sum
    data["referrals_count"] = referrals_list
    await redis.set(f"buy_script:{redis_key}", json.dumps(data))


@user_callback.callback_query(F.data.regexp(r"^cancel_payment:(.+)$"))
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    redis_key = callback.data.split("cancel_payment:")[1]

    raw_data = await redis.get(f"buy_script:{redis_key}")
    if not raw_data:
        return

    data = json.loads(raw_data)

    for msg_key in ("payment_msg_id", "send_payment_msg_id"):
        msg_id = data.get(msg_key)
        if msg_id:
            try:
                await bot.delete_message(chat_id=data.get("user_id"), message_id=msg_id)
            except:
                pass

    try:
        await callback.message.delete()
    except:
        pass

    try:
        await bot.delete_message(
            chat_id=raw_data.get("user_id"),
            message_id=raw_data.get("payment_msg_id")
        )
    except:
        pass

    try:
        await bot.delete_message(
            chat_id=raw_data.get("user_id"),
            message_id=raw_data.get("send_payment_msg_id")
        )
    except:
        pass

    await state.clear()
    await redis.delete(f"buy_script:{redis_key}")

    await callback.message.answer("‚ùå <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>", parse_mode="HTML")



@user_callback.callback_query(F.data.regexp(r"send_pay:(.+)$"))
async def send_pay(callback: types.CallbackQuery, state: FSMContext):
    redis_key = callback.data.split("send_pay:")[1]

    if not redis_key:
        await state.clear()
        return

    raw_data = await redis.get(f"buy_script:{redis_key}")

    if not raw_data:
        await state.clear()
        return

    data = json.loads(raw_data)

    referral_list = data.get("referrals_count")
    if referral_list:
        for ref in referral_list:
            await sync_to_async(operations.change_status_referral_by_id)(
                referral_id=ref.get("id"),
                status=False
            )

    admins = await sync_to_async(operations.get_admins)()

    _admins_dict = {}

    user_id = data.get('user_id')
    user_info = await bot.get_chat(user_id)
    username = user_info.username or "—Å–∫—Ä—ã—Ç"

    caption = (
        f"üë§ <b>User ID:</b> <code>{user_id}</code>\n"
        f"üîó <b>Username:</b> @{username if username != '—Å–∫—Ä—ã—Ç' else '—Å–∫—Ä—ã—Ç'}\n"
        f"üÜî <b>–ö–ª—é—á:</b> <code>{data.get('key')}</code>\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {data.get('payment_sum')} —Å—É–º\n"
        f"‚è± <b>–ù–∞—á–∞–ª–æ:</b> <code>{data.get('start_at')}</code>\n"
        f"‚è≥ <b>–ö–æ–Ω–µ—Ü:</b> <code>{data.get('stop_at')}</code>"
    )

    for admin in admins:
        admin_id = admin.get("user")
        message = await callback.bot.send_photo(
            chat_id=admin_id,
            photo=data.get("file_id"),
            caption=caption,
            reply_markup=admin_inline.check_payment(redis_key),
            parse_mode="HTML"
        )
        _admins_dict[str(admin_id)] = message.message_id

    data["admins"] = _admins_dict
    await redis.set(f"buy_script:{redis_key}", json.dumps(data))

    try:
        await bot.edit_message_reply_markup(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id,
            reply_markup=None,
        )
    except:
        pass

    await callback.message.answer(
        "üîé <b>–ü–ª–∞—Ç—ë–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç —á–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é.",
        parse_mode="HTML"
    )

@user_callback.callback_query(F.data.regexp(r"^resend_pay:(.+)$"))
async def recheck_pay(callback: types.CallbackQuery, state: FSMContext):
    redis_key = callback.data.split("resend_pay:")[1]

    await callback.message.answer(
        "üì§ <b>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–∫</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        parse_mode="HTML"
    )

    await state.set_state(UserPaymentCheck.waiting_for_img)
    await state.update_data(redis_key=redis_key)
