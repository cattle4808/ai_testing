import pprint

from aiogram import Router
from aiogram import F, types
from asgiref.sync import sync_to_async
from django.conf import settings
from aiogram.fsm.context import FSMContext
from django.forms import model_to_dict
from django.utils import timezone

from ..keyboards.user import inline as user_inline, reply as user_reply
from ..keyboards.admin import inline as admin_inline, reply as admin_reply
from .. import CommandMap
from ..fsm.user import UserPaymentCheck
from api.v1 import models
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from services.models import operations
from services.models import refferal

user_history = Router()

import logging
import traceback

logger = logging.getLogger(__name__)

def catch_error(error_id):
    def decorator(func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                logger.error(f"[{error_id}] Exception in {func.__name__}: {e}")
                logger.debug(traceback.format_exc())
                return {"error": error_id}
        return wrapper
    return decorator

class ScriptsPagination:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —Å–∫—Ä–∏–ø—Ç–æ–≤"""

    @staticmethod
    def get_status_emoji(script_data: dict) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
        if script_data.get('is_active'):
            return "üü¢"
        else:
            return "üî¥"

    @staticmethod
    def format_datetime(dt) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
        if dt is None:
            return "–ù–µ –∑–∞–¥–∞–Ω–æ"
        if isinstance(dt, str):
            return dt
        return dt.strftime("%d.%m.%Y %H:%M")

    @staticmethod
    def get_script_short_info(script_data: dict, index: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–ø—Ç–µ"""
        status = ScriptsPagination.get_status_emoji(script_data)
        usage_percent = (script_data.get('used', 0) / script_data.get('max_usage', 1)) * 100

        return (
            f"{index}. {status} <b>{script_data.get('script', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n"
            f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {script_data.get('used', 0)}/{script_data.get('max_usage', 0)} ({usage_percent:.1f}%)\n"
            f"   ‚è∞ –î–æ: {ScriptsPagination.format_datetime(script_data.get('stop_at'))}\n"
        )

    @staticmethod
    def create_pagination_keyboard(current_page: int, total_pages: int, scripts_on_page: list) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        builder = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (1-5)
        script_buttons = []
        for i, script in enumerate(scripts_on_page, 1):
            script_buttons.append(
                InlineKeyboardButton(
                    text=f"{i}",
                    callback_data=f"script_detail_{script['id']}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –æ–¥–∏–Ω —Ä—è–¥
        if script_buttons:
            builder.row(*script_buttons)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if current_page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"scripts_page_{current_page - 1}"
                )
            )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data="current_page"
            )
        )

        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if current_page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"scripts_page_{current_page + 1}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if nav_buttons:
            builder.row(*nav_buttons)

        # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="scripts_page_1"
            )
        )

        return builder.as_markup()

    @staticmethod
    def create_script_detail_keyboard(script_id: int, is_active: bool = False) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
        builder = InlineKeyboardBuilder()

        builder.row(
            InlineKeyboardButton(
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á",
                callback_data=f"copy_key_{script_id}"
            )
        )

        # –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if is_active:
            builder.row(
                InlineKeyboardButton(
                    text="‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"deactivate_script_{script_id}"
                )
            )
        else:
            builder.row(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"activate_script_{script_id}"
                )
            )

        builder.row(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data=f"refresh_script_{script_id}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_script_{script_id}"
            )
        )

        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="scripts_page_1"
            )
        )

        return builder.as_markup()


# Operations functions
@catch_error("ERR_GET_MY_SCRIPTS_WITH_PAGINATION")
def get_my_scripts_with_pagination(user_id: int, page: int = 1, per_page: int = 5) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    offset = (page - 1) * per_page
    queryset = models.IdScript.objects.filter(owner__user=user_id).order_by("-created_at")
    total = queryset.count()
    scripts = queryset[offset:offset + per_page]

    script_list = [
        model_to_dict(script, fields=[
            'id', 'script', 'key', 'script_type', 'fingerprint',
            'start_at', 'stop_at', 'is_active', 'used',
            'max_usage', 'first_activate', 'first_seen'
        ]) for script in scripts
    ]

    return {
        "total": total,
        "page": page,
        "per_page": per_page,
        "scripts": script_list
    }

@catch_error("ERR_GET_SCRIPT_BY_ID")
def get_script_by_id(script_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –ø–æ ID"""
    try:
        script = models.IdScript.objects.get(id=script_id)
        return model_to_dict(script, fields=[
            'id', 'script', 'key', 'script_type', 'fingerprint',
            'start_at', 'stop_at', 'is_active', 'used',
            'max_usage', 'first_activate', 'first_seen'
        ])
    except models.IdScript.DoesNotExist:
        return None

@catch_error("ERR_ACTIVATE_SCRIPT")
def activate_script(script_id: int, user_id: int) -> dict:
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç"""
    try:
        script = models.IdScript.objects.get(id=script_id, owner__user=user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç
        if script.is_active:
            return {'success': False, 'error': '–°–∫—Ä–∏–ø—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è
        current_time = timezone.now()
        if current_time < script.start_at:
            return {'success': False, 'error': '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ'}

        if current_time > script.stop_at:
            return {'success': False, 'error': '–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if script.used >= script.max_usage:
            return {'success': False, 'error': '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞'}

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç
        script.is_active = True
        if not script.first_activate:
            script.first_activate = current_time
        script.save()

        return {'success': True}

    except models.IdScript.DoesNotExist:
        return {'success': False, 'error': '–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
    except Exception as e:
        return {'success': False, 'error': str(e)}

@catch_error("ERR_DEACTIVATE_SCRIPT")
def deactivate_script(script_id: int, user_id: int) -> dict:
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç"""
    try:
        script = models.IdScript.objects.get(id=script_id, owner__user=user_id)

        if not script.is_active:
            return {'success': False, 'error': '–°–∫—Ä–∏–ø—Ç —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}

        script.is_active = False
        script.save()

        return {'success': True}

    except models.IdScript.DoesNotExist:
        return {'success': False, 'error': '–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
    except Exception as e:
        return {'success': False, 'error': str(e)}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ReplyKeyboard –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏/—Å–∫—Ä–∏–ø—Ç—ã"
@user_history.message(F.text.in_(["üìÇ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", "üìÇ –ú–æ–∏ —Å–∫—Ä–∏–ø—Ç—ã", "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", "–ú–æ–∏ —Å–∫—Ä–∏–ø—Ç—ã"]))
async def my_purchases_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏' –∏–∑ ReplyKeyboard"""
    await my_scripts(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@user_history.message(F.text == CommandMap.User.MY_SCRIPTS)
async def my_scripts(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    state_name = await state.get_state()
    if state_name == UserPaymentCheck.waiting_for_img:
        try:
            await message.delete()
        except:
            pass
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–ª–∞—Ç—É ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
        return

    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    scripts_data = await sync_to_async(get_my_scripts_with_pagination)(user_id, page=1, per_page=5)

    if not scripts_data['scripts']:
        await message.answer(
            "üìÇ <b>–ú–æ–∏ —Å–∫—Ä–∏–ø—Ç—ã</b>\n\n"
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤.\n"
            "–ö—É–ø–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∑–¥–µ—Å—å."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    scripts_text = "üìÇ <b>–ú–æ–∏ —Å–∫—Ä–∏–ø—Ç—ã</b>\n\n"

    for i, script in enumerate(scripts_data['scripts'], 1):
        scripts_text += ScriptsPagination.get_script_short_info(script, i)
        scripts_text += "\n"

    scripts_text += f"üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: {len(scripts_data['scripts'])} –∏–∑ {scripts_data['total']}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    total_pages = (scripts_data['total'] + scripts_data['per_page'] - 1) // scripts_data['per_page']
    keyboard = ScriptsPagination.create_pagination_keyboard(
        current_page=1,
        total_pages=total_pages,
        scripts_on_page=scripts_data['scripts']
    )

    await message.answer(scripts_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
@user_history.callback_query(F.data.startswith("scripts_page_"))
async def handle_scripts_page(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    page = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    scripts_data = await sync_to_async(get_my_scripts_with_pagination)(user_id, page=page, per_page=5)

    if not scripts_data['scripts']:
        await callback.answer("‚ùå –ù–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    scripts_text = "üìÇ <b>–ú–æ–∏ —Å–∫—Ä–∏–ø—Ç—ã</b>\n\n"

    for i, script in enumerate(scripts_data['scripts'], 1):
        scripts_text += ScriptsPagination.get_script_short_info(script, i)
        scripts_text += "\n"

    scripts_text += f"üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: {len(scripts_data['scripts'])} –∏–∑ {scripts_data['total']}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    total_pages = (scripts_data['total'] + scripts_data['per_page'] - 1) // scripts_data['per_page']
    keyboard = ScriptsPagination.create_pagination_keyboard(
        current_page=page,
        total_pages=total_pages,
        scripts_on_page=scripts_data['scripts']
    )

    await callback.message.edit_text(scripts_text, reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫—Ä–∏–ø—Ç–∞
@user_history.callback_query(F.data.startswith("script_detail_"))
async def handle_script_detail(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫—Ä–∏–ø—Ç–µ"""
    script_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–ø—Ç–µ
    script = await sync_to_async(get_script_by_id)(script_id)

    if not script:
        await callback.answer("‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    status_emoji = ScriptsPagination.get_status_emoji(script)
    usage_percent = (script.get('used', 0) / script.get('max_usage', 1)) * 100

    detail_text = (
        f"üìã <b>–î–µ—Ç–∞–ª–∏ —Å–∫—Ä–∏–ø—Ç–∞</b>\n\n"
        f"üÜî <b>ID:</b> {script.get('id')}\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {script.get('script', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üîë <b>–ö–ª—é—á:</b> <code>{script.get('key', '–ù–µ –∑–∞–¥–∞–Ω')}</code>\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if script.get('is_active') else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        f"üéØ <b>–¢–∏–ø:</b> {script.get('script_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
        f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {script.get('used', 0)}/{script.get('max_usage', 0)} ({usage_percent:.1f}%)\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        f"   ‚Ä¢ –ù–∞—á–∞–ª–æ: {ScriptsPagination.format_datetime(script.get('start_at'))}\n"
        f"   ‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {ScriptsPagination.format_datetime(script.get('stop_at'))}\n\n"
        f"üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
        f"   ‚Ä¢ –û—Ç–ø–µ—á–∞—Ç–æ–∫: {script.get('fingerprint', '–ù–µ –∑–∞–¥–∞–Ω')}\n"
        f"   ‚Ä¢ –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è: {ScriptsPagination.format_datetime(script.get('first_activate'))}\n"
        f"   ‚Ä¢ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {ScriptsPagination.format_datetime(script.get('first_seen'))}\n"
    )

    keyboard = ScriptsPagination.create_script_detail_keyboard(script_id, script.get('is_active', False))

    await callback.message.edit_text(detail_text, reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
@user_history.callback_query(F.data.startswith("activate_script_"))
async def handle_activate_script(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞"""
    script_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç
    result = await sync_to_async(activate_script)(script_id, user_id)

    if result.get('success'):
        await callback.answer("‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await handle_script_detail(callback)
    else:
        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {error_msg}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
@user_history.callback_query(F.data.startswith("deactivate_script_"))
async def handle_deactivate_script(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞"""
    script_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç
    result = await sync_to_async(deactivate_script)(script_id, user_id)

    if result.get('success'):
        await callback.answer("‚è∏Ô∏è –°–∫—Ä–∏–ø—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await handle_script_detail(callback)
    else:
        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {error_msg}", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
@user_history.callback_query(F.data.startswith("copy_key_"))
async def handle_copy_key(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    script_id = int(callback.data.split("_")[-1])

    script = await sync_to_async(get_script_by_id)(script_id)

    if not script:
        await callback.answer("‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    key = script.get('key', '')
    if key:
        await callback.answer(f"üîë –ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {key}", show_alert=True)
    else:
        await callback.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∫—Ä–∏–ø—Ç–∞
@user_history.callback_query(F.data.startswith("refresh_script_"))
async def handle_refresh_script(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    script_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    script = await sync_to_async(get_script_by_id)(script_id)

    if not script:
        await callback.answer("‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await handle_script_detail(callback)
    await callback.answer("üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
@user_history.callback_query(F.data.startswith("delete_script_"))
async def handle_delete_script(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    script_id = int(callback.data.split("_")[-1])

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    await callback.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
@user_history.callback_query(F.data == "current_page")
async def handle_current_page(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer("üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")