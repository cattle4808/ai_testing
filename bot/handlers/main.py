from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async

from services.crypto import CompactReferralCipher
from services.models import operations
from ..keyboards.user import reply as user_reply, inline as user_inline
from ..keyboards.admin import reply as admin_reply, inline as admin_inline
from .. import bot
from ..filters import police


main = Router()

@main.message(CommandStart())
async def start_handler(message: types.Message, command: CommandStart):
    await message.answer(
        "<b>üéì –†–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ Uchi, –†–≠–®, Foxford –∏ –¥—Ä</b>\n\n"
        "–°–µ—Ä–≤–∏—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.\n"
        "–†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ ‚Äî –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.\n\n"
        "‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>\n"
        "‚úÖ <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ, –≥–¥–µ –∏ —Ç–µ—Å—Ç</b>\n"
        "‚úÖ <b>–£–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</b>\n"
        "‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏</b>\n\n"
        "üí∏ <i>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ ‚Äî –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É.</i>",
        parse_mode="HTML"
    )

    user_id = message.from_user.id
    username = message.from_user.username or "–ì–æ—Å—Ç—å"
    referral_code = command.args
    ref_by = None

    if referral_code:
        try:
            ref_by = CompactReferralCipher().decrypt_id(referral_code)
            if ref_by == user_id or ref_by is None:
                ref_by = None
            else:
                await message.answer("üë• –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.")
        except Exception as e:
            ref_by = None
            print(f"[REFERRAL ERROR] '{referral_code}': {e}")
    # else:
    #     await message.answer()

    user = await sync_to_async(operations.get_or_create_tg_user)(user_id, ref_by)

    if not user.get("police", False):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É", callback_data="accept_policy_main")]
        ])

        await bot.send_document(
            chat_id=user_id,
            document="BQACAgIAAxkBAAIW_2iDiRrkxq2C4XoGwk2tHwZecaoQAAJndwACx90YSJrHnFqsl8QMNgQ",
            caption="<b>üõ°Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</b>\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ.",
            parse_mode="HTML",
            reply_markup=kb
        )
        return

    if await sync_to_async(operations.is_admin)(user_id):
        await message.answer("‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=admin_reply.main_menu())
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {username}!", reply_markup=user_reply.main_menu())


@main.callback_query(F.data == "accept_policy_main")
async def accept_policy_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ì–æ—Å—Ç—å"

    await sync_to_async(operations.set_police)(user_id, True)

    await callback.message.delete()
    await callback.answer("‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")

    if await sync_to_async(operations.is_admin)(user_id):
        await callback.message.answer("‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=admin_reply.main_menu())
    else:
        await callback.message.answer(f"–ü—Ä–∏–≤–µ—Ç, {username}!", reply_markup=user_reply.main_menu())
